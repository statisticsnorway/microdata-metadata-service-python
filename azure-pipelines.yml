name: $(Build.SourceBranch)-$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  imageName: 'eu.gcr.io/prod-bip/ssb/microdata/metadata-service'
  repoName: 'prod-bip/ssb/microdata/metadata-service'
  fullSha: '$(Build.SourceVersion)'
  #isMaster: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  isPoc: $[eq(variables['Build.SourceBranch'], 'refs/heads/non-root-poc')]
  #latestTag: 'bipLatest'
  latestTag: 'nonPocLatest'

stages:

- stage: unitTests
  displayName: Run Unit Tests
  jobs:
  - job: unitTests
    displayName: Run Unit Tests

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.10'
        displayName: 'Use Python 3.10'

      - script: |
          export PIP_NO_CACHE_DIR=off \
            PIP_DISABLE_PIP_VERSION_CHECK=on \
            PIP_DEFAULT_TIMEOUT=100 \
            POETRY_VERSION=1.4.1 \
            POETRY_VIRTUALENVS_IN_PROJECT=true \
            POETRY_NO_INTERACTION=1
        displayName: 'Export environment variables'
      
      - script: |
          sudo apt-get install -y \
            curl \
            build-essential \
            python3-distutils \
            python3-apt \
            libpython3.10-dev
          curl -sSL https://install.python-poetry.org | python3 - --version 1.4.1
          source $HOME/.poetry/env
          poetry install
        displayName: 'Install dependencies'

      - script: |
          source $HOME/.poetry/env
          poetry run pytest --cov=datastore_builder/
        displayName: 'Test with pytest'

- stage: build
  displayName: Build Docker Image and push to GCR
  dependsOn: unitTests
  condition: and(succeeded(), eq(variables.isPoc, true))
  jobs:
    - job: buildAndPush
      displayName: Build and Push to GCR

      steps:
        # Build Docker image
        - task: Docker@2
          displayName: 'Docker build'
          inputs:
            repository: $(imageName)
            command: 'build'
            Dockerfile: 'Dockerfile'
            tags: |
              $(Build.SourceBranchName)-$(fullSha)
              $(latestTag)
        # Authenticate Docker to GCR using predefined service connection
        - task: Docker@2
          displayName: 'Login to GCR'
          inputs:
            command: login
            containerRegistry: gcrServiceConnection-Microdatano

        # Push Docker Image to GCR
        - task: Docker@2
          displayName: 'Push image to GCR'
          inputs:
            ContainerRegistry: |
              gcrServiceConnection-Microdatano
            repository: $(repoName)
            command: 'push'
            tags: |
              $(Build.SourceBranchName)-$(fullSha)
              $(latestTag)
